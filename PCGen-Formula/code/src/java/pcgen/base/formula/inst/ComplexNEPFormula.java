/*
 * Copyright 2014-15 (C) Tom Parker <thpr@users.sourceforge.net>
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package pcgen.base.formula.inst;

import java.io.StringReader;

import pcgen.base.formula.base.DependencyManager;
import pcgen.base.formula.base.FormulaManager;
import pcgen.base.formula.base.FormulaSemantics;
import pcgen.base.formula.base.LegalScope;
import pcgen.base.formula.parse.FormulaParser;
import pcgen.base.formula.parse.ParseException;
import pcgen.base.formula.parse.SimpleNode;
import pcgen.base.formula.visitor.ReconstructionVisitor;
import pcgen.base.util.FormatManager;

/**
 * A ComplexNEPFormula is a formula that is part of the "Native Equation Parser"
 * for PCGen. A ComplexNEPFormula is a binary representation of a formula stored
 * in a parsed tree of objects. The tree of nodes is generated by the parser
 * present in pcgen.base.formula.parse.
 * 
 * The tree within a ComplexNEPFormula is designed to visited in order to
 * evaluate or otherwise process a ComplexNEPFormula.
 * 
 * @param <T>
 *            The Format (Class) of object returned by this ComplexNEPFormula
 */
public class ComplexNEPFormula<T> implements NEPFormula<T>
{

	/**
	 * The root node of the tree representing the calculation of this
	 * ComplexNEPFormula.
	 * 
	 * Note that while this object is private, it is intended that this object
	 * will escape from the ComplexNEPFormula instance (This is because the
	 * method of evaluating or processing a ComplexNEPFormula uses a visitor
	 * pattern on the tree of objects). Given that this root object and the
	 * resulting tree is shared, a ComplexNEPFormula is not immutable; it is up
	 * to the behavior of the visitor to ensure that it treats the
	 * ComplexNEPFormula in an appropriate fashion.
	 */
	private final SimpleNode root;

	/**
	 * Construct a new ComplexNEPFormula from the given String. This calculates
	 * the tree of objects representing the calculation to be performed by the
	 * ComplexNEPFormula, and loads the root of that tree into the root field.
	 * 
	 * @param expression
	 *            The String representation of the formula used to construct the
	 *            ComplexNEPFormula.
	 * @throws IllegalArgumentException
	 *             if the given String does not represent a well-structured
	 *             Formula. (For example, if parenthesis are not matched, an
	 *             exception will be thrown)
	 */
	public ComplexNEPFormula(String expression)
	{
		if (expression == null)
		{
			throw new IllegalArgumentException(
				"Cannot make formula from null String");
		}
		try
		{
			root = new FormulaParser(new StringReader(expression)).query();
		}
		catch (ParseException e)
		{
			throw new IllegalArgumentException(e);
		}
	}

	/**
	 * Resolves the ComplexNEPFormula in the context of the given
	 * ScopeInformation. The given ScopeInformation must contain information
	 * about variable values, available functions, and other characteristics
	 * required for the formula to produce a value.
	 * 
	 * If variables and formulas required by the ComplexNEPFormula are not
	 * available in the given ScopeInformation, behavior is not guaranteed and
	 * ComplexNEPFormula or other methods called within this method reserve the
	 * right to throw an Exception or otherwise not fail gracefully. (The
	 * precise behavior is likely defined by the FormulaManager).
	 * 
	 * Note in the case of a valid formula that the format (but not the exact
	 * class) of the return value is guaranteed by the ComplexNEPFormula. The
	 * Class may extend the format contained by the ComplexNEPFormula. The exact
	 * class returned is defined by the ScopeInformation, which can therefore
	 * implement the appropriate processing (precision in the case of numbers)
	 * desired for the given calculation.
	 * 
	 * @param scopeInfo
	 *            The ScopeInformation providing the context in which the
	 *            ComplexNEPFormula is to be resolved.
	 * @param assertedFormat
	 *            The Class indicating the asserted Format for the formula. This
	 *            parameter is optional - null can indicate that there is no
	 *            format asserted by the context of the formula
	 * @param owner
	 *            The owner of this NEPFormula for purposes of formula resolution
	 * @return The value calculated for the ComplexNEPFormula.
	 * @throws IllegalArgumentException
	 *             if the given ScopeInformation is null.
	 */
	@Override
	public T resolve(ScopeInformation scopeInfo, Class<T> assertedFormat,
		Object owner)
	{
		if (scopeInfo == null)
		{
			throw new IllegalArgumentException(
				"Cannot resolve formula with null ScopeInformation");
		}
		@SuppressWarnings("unchecked")
		T result = (T) scopeInfo.evaluate(root, assertedFormat, owner);
		return result;
	}

	/**
	 * Determines the dependencies for this formula, including the VariableID
	 * objects representing the variables within the ComplexNEPFormula.
	 * 
	 * The given ScopeInformation must contain information about variable
	 * values, available functions, and other characteristics required for the
	 * formula to establish the list of variables contained within the
	 * ComplexNEPFormula.
	 * 
	 * The given DependencyManager will be loaded with the dependency
	 * information.
	 * 
	 * @param scopeInfo
	 *            The ScopeInformation providing the context in which the
	 *            ComplexNEPFormula variables are to be determined
	 * @param depManager
	 *            The DependencyManager to be used to capture the dependencies
	 * @param assertedFormat
	 *            The Class indicating the asserted Format for the
	 *            ComplexNEPFormula. This parameter is optional - null can
	 *            indicate that there is no format asserted by the context of
	 *            the formula
	 * @throws IllegalArgumentException
	 *             if the given ScopeInformation is null
	 */
	@Override
	public void getDependencies(ScopeInformation scopeInfo,
		DependencyManager depManager, Class<?> assertedFormat)
	{
		if (scopeInfo == null)
		{
			throw new IllegalArgumentException(
				"Cannot get formula dependencies with null ScopeInformation");
		}
		if (depManager == null)
		{
			throw new IllegalArgumentException(
				"Cannot get formula dependencies with null DependencyManager");
		}
		scopeInfo.getDependencies(root, depManager, assertedFormat);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FormulaSemantics isValid(FormulaManager fm, LegalScope legalScope,
		FormatManager<T> formatManager, Class<?> assertedFormat)
	{
		if (fm == null)
		{
			throw new IllegalArgumentException(
				"Cannot resolve formula with null FormulaManager");
		}
		return fm.isValid(root, legalScope, formatManager, assertedFormat);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String toString()
	{
		ReconstructionVisitor rv = new ReconstructionVisitor();
		StringBuilder sb = new StringBuilder();
		rv.visit(root, sb);
		return sb.toString();
	}
}
